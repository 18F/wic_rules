[
{
  "model": "rules_server.ruleset",
  "pk": 1,
  "fields": {
    "program": "wic",
    "entity": "federal",
    "sample_input": [
      {
        "income": [
          {
            "source": "wages-and-salary",
            "dollars": 1480.5,
            "verified": true,
            "frequency": "bi-weekly"
          },
          {
            "source": "self-employment",
            "dollars": 150.75,
            "verified": false,
            "frequency": "weekly"
          },
          {
            "source": "social-security",
            "dollars": 200,
            "verified": "Excepted",
            "frequency": "semi-monthly"
          },
          {
            "source": "royalties",
            "dollars": 2000,
            "verified": true,
            "frequency": "annually"
          },
          {
            "source": "alimony-and-child-support",
            "dollars": 200,
            "verified": false,
            "frequency": "monthly"
          }
        ],
        "applicants": [
          {
            "id": 1,
            "breastfeeding": false,
            "proof_of_identity": true,
            "currently_pregnant": true,
            "physically_present": true,
            "adjunct_income_eligibility": [
              {
                "program": "snap",
                "verified": true
              },
              {
                "program": "medicaid",
                "verified": true
              }
            ],
            "date_birth_or_pregnancy_end": null
          },
          {
            "id": 2,
            "proof_of_identity": true,
            "physically_present": true
          },
          {
            "id": 3,
            "proof_of_identity": true,
            "physically_present": true,
            "adjunct_income_eligibility": [
              {
                "program": "snap",
                "verified": "Excepted"
              }
            ]
          },
          {
            "id": 4,
            "proof_of_identity": true,
            "physically_present": true
          }
        ],
        "application_id": 1,
        "referrer_state": "OH",
        "number_in_economic_unit": 5
      },
      {
        "applicants": [
          {
            "id": 6,
            "income": [
              {
                "source": "wages-and-salary",
                "dollars": 11480.5,
                "verified": true,
                "frequency": "bi-weekly"
              }
            ],
            "proof_of_identity": true,
            "physically_present": true
          }
        ],
        "application_id": 2,
        "referrer_state": "AK",
        "number_in_economic_unit": 1
      }
    ],
    "null_sources": {
      "income": "unnest(array[0]::numeric[], array['annual']::text[],\n                            array['None']::text[], array[True]::text[])\n          as t(dollars, frequency, source, verified) ",
      "adjunct_income_eligibility": "unnest(array[]::text[], array[]::text[]) as t(program, verified)"
    }
  }
},
{
  "model": "rules_server.node",
  "pk": 1,
  "fields": {
    "name": "income",
    "parent": null,
    "ruleset": 1,
    "requires_all": false
  }
},
{
  "model": "rules_server.node",
  "pk": 2,
  "fields": {
    "name": "identity",
    "parent": null,
    "ruleset": 1,
    "requires_all": true
  }
},
{
  "model": "rules_server.node",
  "pk": 3,
  "fields": {
    "name": "categories",
    "parent": null,
    "ruleset": 1,
    "requires_all": false
  }
},
{
  "model": "rules_server.rule",
  "pk": 1,
  "fields": {
    "name": "standard income",
    "code": "\n    , total_income as (\n        select SUM(ANNUALIZE(i.frequency) * i.dollars) AS annual_income,\n               FEDERAL_POVERTY_LEVEL(\n                            a.number_in_economic_unit,\n                            a.referrer_state) AS poverty_level,\n                        a.number_in_economic_unit,\n                        a.referrer_state\n                FROM income i\n                CROSS JOIN applicant a  -- only one applicant row anyway\n                GROUP BY 2, 3, 4)\n    select\n            CASE WHEN annual_income <= 1.85 * poverty_level THEN ROW(true, null, 'Household annual income ' || annual_income::money || ' within 185%% of federal poverty level (' ||\n                                                                        poverty_level::money || ' for ' || number_in_economic_unit || ' residents in ' || referrer_state || ')'\n                                                                        )::finding\n                                                            ELSE ROW(false, null, 'Household annual income ' || annual_income::money || ' exceeds 185%% of federal poverty level (' ||\n                                                                        poverty_level::money || ' for ' || number_in_economic_unit || ' residents in ' || referrer_state || ')'\n                                                                        )::finding END AS result\n    from total_income\n    ",
    "node": 1,
    "sufficient": false
  }
},
{
  "model": "rules_server.rule",
  "pk": 2,
  "fields": {
    "name": "adjunct income eligibility",
    "code": "\n    select\n        CASE count(program) WHEN 0 THEN\n            ROW(false, NULL, 'No adjunct program qualifications')::finding\n        ELSE\n            ROW(true, NULL, 'Qualifies for ' || ARRAY_TO_STRING(ARRAY_AGG(program), ', '))::finding\n        END AS result\n    from adjunct_income_eligibility\n    ",
    "node": 1,
    "sufficient": false
  }
},
{
  "model": "rules_server.rule",
  "pk": 3,
  "fields": {
    "name": "proof of identity",
    "code": "\n    select\n        CASE proof_of_identity\n        WHEN 'True' THEN\n            ROW(true, NULL, 'Proof of identity supplied')::finding\n        WHEN 'Exception' THEN\n            ROW(true, NULL, 'Applicant must confirm his/her identity in writing')::finding\n        ELSE\n            ROW(false, NULL, 'No proof of identity supplied')::finding\n        END AS result\n    from applicant\n    ",
    "node": 2,
    "sufficient": false
  }
},
{
  "model": "rules_server.rule",
  "pk": 4,
  "fields": {
    "name": "pregnant",
    "code": "\n    select\n        CASE currently_pregnant\n        WHEN 'True' THEN\n            ROW(true, ROW(null, true, 'to the last day of the month in which the infant becomes six weeks old or the pregnancy ends',\n            'A pregnant woman will be certified for the duration of her pregnancy, and up to the last day of the month in which the infant becomes six weeks old or the pregnancy ends. - 7 CFR 246.7 (g)(1)(i)'\n            )::limitation, 'Woman currently pregnant')::finding\n        ELSE\n            ROW(true, NULL, 'Not pregnant woman')::finding\n        END AS result\n    from applicant\n    ",
    "node": 3,
    "sufficient": false
  }
},
{
  "model": "rules_server.rule",
  "pk": 5,
  "fields": {
    "name": "postpartum",
    "code": "\n    select\n        CASE WHEN\n          date_birth_or_pregnancy_end >= (current_date - interval '1 year')\n          AND\n          (NOT breastfeeding)\n          AND\n          last_day_of_month((date_birth_or_pregnancy_end + interval '6 months')::date) >= current_date\n        THEN\n          ROW(true, ROW(last_day_of_month((date_birth_or_pregnancy_end + interval '6 months')::date), true,\n                        'to the last day of the month in which the infant becomes six weeks old or the pregnancy ends',\n                        'A pregnant woman will be certified for the duration of her pregnancy, and up to the last day of the month in which the infant becomes six weeks old or the pregnancy ends. - 7 CFR 246.7 (g)(1)(i)'\n                        )::limitation, 'Woman currently pregnant')::finding\n        ELSE\n            ROW(true, NULL, 'Not pregnant woman')::finding\n        END AS result\n    from applicant\n    ",
    "node": 3,
    "sufficient": false
  }
},
{
  "model": "rules_server.syntaxschema",
  "pk": 1,
  "fields": {
    "ruleset": 1,
    "type": "jsonschema",
    "code": {
      "type": "array",
      "items": {
        "type": "object",
        "title": "applications",
        "properties": {
          "applicants": {
            "type": "array",
            "items": {
              "type": "object",
              "title": "applicant",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Unique identifier within a submission"
                },
                "breastfeeding": {
                  "type": "boolean",
                  "default": false,
                  "description": ""
                },
                "proof_of_identity": {
                  "$ref": "#/definitions/ynexception",
                  "description": "Proof of applicant's identity has been furnished"
                },
                "currently_pregnant": {
                  "type": "boolean",
                  "default": false,
                  "description": ""
                },
                "physically_present": {
                  "$ref": "#/definitions/ynexception",
                  "description": ""
                },
                "adjunct_income_eligibility": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "program": {
                        "type": "string"
                      },
                      "verified": {
                        "$ref": "#/definitions/ynexception"
                      }
                    }
                  }
                },
                "date_birth_or_pregnancy_end": {
                  "type": [
                    "string",
                    "null"
                  ],
                  "format": "date-time",
                  "description": ""
                }
              }
            },
            "income": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "source": {
                    "type": "string"
                  },
                  "dollars": {
                    "type": "number",
                    "multipleOf": 0.01
                  },
                  "verified": {
                    "$ref": "#/definitions/ynexception"
                  },
                  "frequency": {
                    "enum": [
                      "annually",
                      "monthly",
                      "semimonthly",
                      "twice-monthly",
                      "biweekly",
                      "weekly"
                    ],
                    "type": "string"
                  }
                }
              },
              "description": "Household income sources"
            },
            "description": "Individuals (adults or children) to receive benefits"
          },
          "referrer_state": {
            "type": "string"
          },
          "number_in_economic_unit": {
            "type": "integer",
            "default": 1
          }
        }
      },
      "title": "Application",
      "$schema": "http://json-schema.org/draft-06/schema#",
      "definitions": {
        "ynexception": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "value": "Excepted"
            }
          ]
        }
      },
      "description": "A set of applications, one per household"
    }
  }
}
]
